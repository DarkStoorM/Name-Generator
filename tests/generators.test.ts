import { beforeEach, describe, expect, test } from "vitest";
import { availableNumberGenerators, config } from "../src/Utils/config";

/*
 * --------------------------------------------------------------------------
 * Generator Tests
 * --------------------------------------------------------------------------
 *
 * These tests mostly make no sense, because they were written for period
 * testing purposes and to make sure all letters will get picked
 *
 */

describe("Implemented number generator tests", (): void => {
  const generatedConsonants = new Set<string>();
  const generatedVowels = new Set<string>();
  const lettersCountPerGenerator = new Map<string, number>();

  // The following can't be in the BeforeAll
  for (const consonant of config.consonants) {
    lettersCountPerGenerator.set(consonant, 0);
  }

  for (const vowel of config.vowels) {
    lettersCountPerGenerator.set(vowel, 0);
  }

  beforeEach((): void => {
    generatedConsonants.clear();
    generatedVowels.clear();

    // clear letters count to 0
    for (const [letter] of lettersCountPerGenerator) {
      lettersCountPerGenerator.set(letter, 0);
    }
  });

  const iterator = availableNumberGenerators.entries();
  let result = iterator.next();

  while (!result.done) {
    const generatorName = result.value[0];
    const generatorClass = new result.value[1]();

    test(`Tests if ${generatorName} is not skipping letters`, (): void => {
      for (let x = 0; x < 1000000; x++) {
        const consonant = config.consonants[generatorClass.next(config.consonants)];
        const vowel = config.vowels[generatorClass.next(config.vowels)];

        generatedConsonants.add(consonant);
        generatedVowels.add(vowel);

        lettersCountPerGenerator.set(consonant, (lettersCountPerGenerator.get(consonant) ?? 0) + 1);
        lettersCountPerGenerator.set(vowel, (lettersCountPerGenerator.get(vowel) ?? 0) + 1);
      }

      // The log here is optional, but it helps checking the statistics for all generators when all tests pass
      console.log(`Statistics for: ${generatorName}`);
      const stats = new Map([...lettersCountPerGenerator.entries()].sort((a, b) => b[1] - a[1]));
      console.log(stats);

      expect(generatedConsonants.size, `Consonants generated by ${generatorName} generator`).toBe(
        config.consonants.length
      );
      expect(generatedVowels.size, `Vowels generated by  ${generatorName} generator`).toBe(config.vowels.length);
    });

    // Go to the next generator
    result = iterator.next();
  }
});
